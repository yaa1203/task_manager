// Service Worker Version - update this when you want to force cache refresh
const CACHE_VERSION = 'v1.0.2'; // Increment version to force cache refresh
const CACHE_NAME = `taskapp-cache-${CACHE_VERSION}`;
const DATA_CACHE_NAME = `taskapp-data-cache-${CACHE_VERSION}`;

// Files to cache for offline access
const urlsToCache = [
  '/',
  '/dashboard',
  '/tasks',
  '/projects',
  '/calendar',
  '/analytics',
  '/offline',
  '/manifest.json',
  // Add your CSS and JS files from Vite build
  // These paths will be generated by Vite, you'll need to add them after build
];

// Install Event - Cache essential files
self.addEventListener('install', (event) => {
  console.log('[ServiceWorker] Install');
  
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('[ServiceWorker] Caching app shell');
        return cache.addAll(urlsToCache)
          .catch((error) => {
            console.error('[ServiceWorker] Failed to cache:', error);
            // Continue even if some files fail to cache
            return Promise.resolve();
          });
      })
      .then(() => self.skipWaiting()) // Activate new SW immediately
  );
});

// Activate Event - Clean up old caches
self.addEventListener('activate', (event) => {
  console.log('[ServiceWorker] Activate');
  
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          // Delete ALL old caches that don't match current version
          if (cacheName !== CACHE_NAME && cacheName !== DATA_CACHE_NAME) {
            console.log('[ServiceWorker] Removing old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      // Clear data cache for API calls to ensure fresh data
      return caches.delete(DATA_CACHE_NAME).then(() => {
        return caches.open(DATA_CACHE_NAME);
      });
    }).then(() => self.clients.claim()) // Take control of all pages immediately
  );
});

// Fetch Event - Serve from cache when possible
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // Skip cross-origin requests
  if (url.origin !== location.origin) {
    return;
  }

  // Handle API requests differently (network first, then cache)
  // IMPORTANT: Don't cache analytics data to avoid stale counts
  if (request.url.includes('/api/') || request.url.includes('/admin/') || 
      request.url.includes('/analytics/data')) {
    event.respondWith(
      fetch(request, {
        cache: 'no-cache', // Force fresh data
        credentials: 'same-origin'
      })
      .then((response) => {
        // Only cache non-analytics API responses
        if (!request.url.includes('/analytics/data') && 
            !request.url.includes('/tasks/count') &&
            !request.url.includes('/projects/count')) {
          const responseToCache = response.clone();
          
          caches.open(DATA_CACHE_NAME)
            .then((cache) => {
              cache.put(request, responseToCache);
            });
        }
        
        return response;
      })
      .catch(() => {
        // If network fails and it's not analytics, try cache
        if (!request.url.includes('/analytics/data')) {
          return caches.match(request);
        }
        // For analytics, return empty data instead of cached
        return new Response(JSON.stringify({
          tasks: { pending: 0, in_progress: 0, done: 0 },
          projects: { active: 0, finished: 0 },
          summary: { total_tasks: 0, completion_rate: 0 }
        }), {
          headers: { 'Content-Type': 'application/json' }
        });
      })
    );
    return;
  }

  // For navigation requests (HTML pages)
  if (request.mode === 'navigate') {
    event.respondWith(
      fetch(request, { cache: 'no-cache' })
        .then((response) => {
          // Update cache with fresh content
          const responseToCache = response.clone();
          caches.open(CACHE_NAME)
            .then((cache) => {
              cache.put(request, responseToCache);
            });
          return response;
        })
        .catch(() => {
          // If offline, try cache first, then offline page
          return caches.match(request)
            .then((response) => {
              if (response) {
                return response;
              }
              // Return offline page if no cache match
              return caches.match('/offline');
            });
        })
    );
    return;
  }

  // For all other requests (CSS, JS, images) - Cache first strategy
  event.respondWith(
    caches.match(request)
      .then((response) => {
        if (response) {
          // Return cached version but update cache in background
          fetch(request)
            .then((response) => {
              if (response && response.status === 200) {
                const responseToCache = response.clone();
                caches.open(CACHE_NAME)
                  .then((cache) => {
                    cache.put(request, responseToCache);
                  });
              }
            })
            .catch(() => {
              // Silently fail if network is unavailable
            });
          
          return response;
        }

        // If not in cache, fetch from network
        return fetch(request)
          .then((response) => {
            // Don't cache non-successful responses
            if (!response || response.status !== 200 || response.type !== 'basic') {
              return response;
            }

            // Clone the response
            const responseToCache = response.clone();

            caches.open(CACHE_NAME)
              .then((cache) => {
                cache.put(request, responseToCache);
              });

            return response;
          })
          .catch(() => {
            // If both cache and network fail, return offline page for HTML requests
            if (request.destination === 'document') {
              return caches.match('/offline');
            }
          });
      })
      .catch(() => {
        // If both cache and network fail, return offline page for HTML requests
        if (request.destination === 'document') {
          return caches.match('/offline');
        }
      })
  );
});

// Background Sync for offline form submissions
self.addEventListener('sync', (event) => {
  console.log('[ServiceWorker] Background sync:', event.tag);
  
  if (event.tag === 'sync-tasks' || event.tag === 'sync-data') {
    event.waitUntil(syncTasks());
  }
});

// Function to sync tasks when back online
async function syncTasks() {
  try {
    // Clear analytics cache to get fresh data
    const cache = await caches.open(DATA_CACHE_NAME);
    const requests = await cache.keys();
    
    // Delete all analytics-related cached requests
    for (const request of requests) {
      if (request.url.includes('/analytics/') || 
          request.url.includes('/tasks') ||
          request.url.includes('/projects')) {
        await cache.delete(request);
      }
    }
    
    // Process pending task submissions
    const taskRequests = requests.filter(req => 
      req.url.includes('/tasks') && req.method === 'POST'
    );
    
    for (const request of taskRequests) {
      try {
        const response = await fetch(request.clone());
        if (response.ok) {
          await cache.delete(request);
        }
      } catch (error) {
        console.error('[ServiceWorker] Sync failed for:', request.url);
      }
    }
    
    // Notify all clients to refresh their data
    const clients = await self.clients.matchAll();
    clients.forEach(client => {
      if (client.postMessage) {
        client.postMessage({
          type: 'SYNC_COMPLETE',
          message: 'Data synchronized'
        });
      }
    });
  } catch (error) {
    console.error('[ServiceWorker] Sync tasks failed:', error);
  }
}

// Push Notifications
self.addEventListener('push', (event) => {
  console.log('[ServiceWorker] Push received');
  
  let data = {
    title: 'New Notification',
    body: 'You have a new update',
    icon: '/icons/logo 72 x 72 .png',
    badge: '/icons/logo 72 x 72 .png'
  };
  
  if (event.data) {
    try {
      data = event.data.json();
    } catch (error) {
      data.body = event.data.text();
    }
  }
  
  const options = {
    body: data.body,
    icon: data.icon || '/icons/logo 72 x 72 .png',
    badge: data.badge || '/icons/logo 72 x 72 .png',
    vibrate: [200, 100, 200],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1,
      url: data.url || '/'
    },
    actions: [
      {
        action: 'view',
        title: 'View',
        icon: '/icons/logo 72 x 72 .png'
      },
      {
        action: 'close',
        title: 'Close',
        icon: '/icons/logo 72 x 72 .png'
      }
    ]
  };
  
  event.waitUntil(
    self.registration.showNotification(data.title, options)
  );
});

// Handle notification clicks
self.addEventListener('notificationclick', (event) => {
  console.log('[ServiceWorker] Notification click:', event.action);
  
  event.notification.close();
  
  if (event.action === 'view' || !event.action) {
    const url = event.notification.data.url || '/';
    event.waitUntil(
      clients.openWindow(url)
    );
  }
});

// Periodic Background Sync (if supported)
if ('periodicSync' in self) {
  self.addEventListener('periodicsync', (event) => {
    if (event.tag === 'update-data') {
      event.waitUntil(updateData());
    }
  });
}

async function updateData() {
  try {
    // Clear cache before fetching new data
    const cache = await caches.open(DATA_CACHE_NAME);
    const requests = await cache.keys();
    
    for (const request of requests) {
      if (request.url.includes('/analytics/') || 
          request.url.includes('/api/sync-data')) {
        await cache.delete(request);
      }
    }
    
    const response = await fetch('/api/sync-data', { cache: 'no-cache' });
    const data = await response.json();
    
    // Don't cache analytics data
    if (!response.url.includes('/analytics/')) {
      await cache.put('/api/sync-data', new Response(JSON.stringify(data)));
    }
    
    // Show notification if there are updates
    if (data.hasUpdates) {
      self.registration.showNotification('Data Updated', {
        body: 'Your data has been synchronized',
        icon: '/icons/logo 72 x 72 .png'
      });
    }
  } catch (error) {
    console.error('[ServiceWorker] Update data failed:', error);
  }
}

// Message handler for manual cache clearing
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'CLEAR_CACHE') {
    event.waitUntil(
      caches.keys().then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            console.log('[ServiceWorker] Clearing cache:', cacheName);
            return caches.delete(cacheName);
          })
        );
      }).then(() => {
        // Send confirmation back to client
        if (event.ports && event.ports[0]) {
          event.ports[0].postMessage({ type: 'CACHE_CLEARED' });
        }
      })
    );
  }
});